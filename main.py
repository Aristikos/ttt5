import speech_recognition as sr
import json
import os
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
from datetime import datetime
import random
import re
import time
import sys

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NLTK
nltk.download('vader_lexicon', quiet=True)
nltk.download('punkt', quiet=True)
sia = SentimentIntensityAnalyzer()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã
LOG_FILE = "thoughts_log.json"
MAX_ATTEMPTS = 3
RECORD_TIMEOUT = 5
PHRASE_LIMIT = 15

# –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è
BANNED_WORDS = ["–Ω–µ–Ω–∞–≤–∏—Å—Ç—å", "–ø—Ä–µ–∑–∏—Ä–∞—é", "—É–±–µ–π", "—Å—É–∏—Ü–∏–¥", "–Ω–∞—Å–∏–ª–∏–µ", "—Ç–µ—Ä—Ä–æ—Ä–∏–∑–º"]

# –¶–∏—Ç–∞—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π
QUOTES = {
    "–ø–æ–∑–∏—Ç–∏–≤": [
        "–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–µ–ª–∞—Ç—å –≤–µ–ª–∏–∫–∏–µ –¥–µ–ª–∞ ‚Äì –ª—é–±–∏—Ç—å —Ç–æ, —á—Ç–æ –¥–µ–ª–∞–µ—à—å. ‚Äì –°—Ç–∏–≤ –î–∂–æ–±—Å",
        "–í–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ, –∏ –≤—ã —É–∂–µ –Ω–∞ –ø–æ–ª–ø—É—Ç–∏. ‚Äì –¢–µ–æ–¥–æ—Ä –†—É–∑–≤–µ–ª—å—Ç",
        "–£—Å–ø–µ—Ö ‚Äî —ç—Ç–æ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∏–¥—Ç–∏ –æ—Ç –Ω–µ—É–¥–∞—á–∏ –∫ –Ω–µ—É–¥–∞—á–µ, –Ω–µ —Ç–µ—Ä—è—è —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞. ‚Äì –£–∏–Ω—Å—Ç–æ–Ω –ß–µ—Ä—á–∏–ª–ª—å"
    ],
    "–Ω–µ–≥–∞—Ç–∏–≤": [
        "–¢—Ä—É–¥–Ω–æ—Å—Ç–∏ –≥–æ—Ç–æ–≤—è—Ç –æ–±—ã—á–Ω—ã—Ö –ª—é–¥–µ–π –∫ –Ω–µ–æ–±—ã—á–Ω–æ–π —Å—É–¥—å–±–µ. ‚Äì –ö.–°. –õ—å—é–∏—Å",
        "–°–∞–º–∞—è —Ç–µ–º–Ω–∞—è –Ω–æ—á—å –ø—Ä–µ–¥—à–µ—Å—Ç–≤—É–µ—Ç —Ä–∞—Å—Å–≤–µ—Ç—É. ‚Äì –¢–æ–º–∞—Å –§—É–ª–ª–µ—Ä",
        "–ò–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ –ø–ª–æ—Ö–æ–µ, —á—Ç–æ–±—ã –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Ö–æ—Ä–æ—à–µ–≥–æ. ‚Äì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    ],
    "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ": [
        "–°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ ‚Äì –≤–µ–ª–∏—á–∞–π—à–µ–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ —Å–∏–ª—ã. ‚Äì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
        "–ñ–∏–∑–Ω—å ‚Äî —ç—Ç–æ —Ç–æ, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –ø–æ–∫–∞ –º—ã —Å—Ç—Ä–æ–∏–º –¥—Ä—É–≥–∏–µ –ø–ª–∞–Ω—ã. ‚Äì –î–∂–æ–Ω –õ–µ–Ω–Ω–æ–Ω",
        "–ù–µ –±–µ—Å–ø–æ–∫–æ–π—Å—è –æ —Ç–æ–º, —á—Ç–æ –∏–¥–µ—Ç –Ω–µ —Ç–∞–∫. –ë–µ—Å–ø–æ–∫–æ–π—Å—è –æ —Ç–æ–º, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ. ‚Äì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    ]
}

def show_animation(message, duration=1.5):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    for _ in range(3):
        for char in ['ÔøΩ', '‚°Ü', '‚†á', '‚†ã', '‚†ô', '‚†∏', '‚¢∞', '‚£†', '‚£Ñ', '‚°Ü']:
            sys.stdout.write(f'\r{char} {message}')
            sys.stdout.flush()
            time.sleep(0.05)
    sys.stdout.write('\r' + ' ' * (len(message) + 2) + '\r')
    sys.stdout.flush()

def record_and_recognize():
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç —Ä–µ—á—å"""
    recognizer = sr.Recognizer()
    
    for attempt in range(1, MAX_ATTEMPTS + 1):
        try:
            with sr.Microphone() as source:
                print(f"\n{'='*40}")
                print(f"üé§ –ü–û–ü–´–¢–ö–ê {attempt}/{MAX_ATTEMPTS}: –ì–æ–≤–æ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞...")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∞ —à—É–º–∞
                recognizer.adjust_for_ambient_noise(source, duration=0.8)
                print("üîä –ì–æ—Ç–æ–≤–æ! –°–ª—É—à–∞—é...", end='', flush=True)
                
                # –ó–∞–ø–∏—Å—å —Å –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–µ–π
                show_animation("–ó–∞–ø–∏—Å—å...")
                
                audio = recognizer.listen(
                    source, 
                    timeout=RECORD_TIMEOUT, 
                    phrase_time_limit=PHRASE_LIMIT
                )
                
                show_animation("–û–±—Ä–∞–±–æ—Ç–∫–∞...")
                text = recognizer.recognize_google(audio, language="ru-RU")
                
                print(f"\n‚úÖ –£–°–ü–ï–®–ù–û: {text}")
                return text
                
        except sr.WaitTimeoutError:
            print("\n‚è≥ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ–≤–æ—Ä–∏—Ç–µ, –∫–æ–≥–¥–∞ —É–≤–∏–¥–∏—Ç–µ —Å–∏–≥–Ω–∞–ª.")
        except sr.UnknownValueError:
            print("\nüîá –†–µ—á—å –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≥–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç—á–µ –∏ –≥—Ä–æ–º—á–µ.")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    print("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫")
    return None

def moderate_text(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π"""
    text_lower = text.lower()
    pattern = r'\b(' + '|'.join(BANNED_WORDS) + r')\b'
    return bool(re.search(pattern, text_lower))

def analyze_sentiment(text):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é NLTK —Å —Ä—É—Å—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—É—é –ª–µ–∫—Å–∏–∫—É
    custom_lexicon = {
        '—Ö–æ—Ä–æ—à–∏–π': 2.0, '–æ—Ç–ª–∏—á–Ω–æ': 3.0, '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ': 3.0, '–ª—é–±–ª—é': 3.0,
        '—Ä–∞–¥': 2.5, '—Å—á–∞—Å—Ç–ª–∏–≤': 3.0, '–≤–æ—Å—Ç–æ—Ä–≥': 3.5, '–≤–æ—Å—Ö–∏—Ç–∏—Ç–µ–ª—å–Ω–æ': 3.0,
        '–ø–ª–æ—Ö–æ–π': -2.0, '—É–∂–∞—Å–Ω–æ': -3.0, '–Ω–µ–Ω–∞–≤–∏–∂—É': -3.0, '–≥—Ä—É—Å—Ç–Ω–æ': -2.0,
        '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω': -2.5, '–∑–ª–æ–π': -2.0, '—É—Å—Ç–∞–ª': -1.5
    }
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ª–µ–∫—Å–∏–∫–æ–Ω –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
    sia.lexicon.update(custom_lexicon)
    
    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
    score = sia.polarity_scores(text)['compound']
    
    if score >= 0.1:
        return "–ø–æ–∑–∏—Ç–∏–≤"
    elif score <= -0.1:
        return "–Ω–µ–≥–∞—Ç–∏–≤"
    else:
        return "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ"

def save_thought(text, mood):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª"""
    entry = {
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "text": text,
        "mood": mood
    }
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists(LOG_FILE):
            with open(LOG_FILE, 'w', encoding='utf-8') as f:
                json.dump([], f)
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        data.append(entry)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω–æ
        with open(LOG_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        
        return True
    except Exception as e:
        print(f"üö® –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return False

def show_stats():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø–∏—Å–µ–π"""
    if not os.path.exists(LOG_FILE):
        return
    
    try:
        with open(LOG_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        mood_count = {"–ø–æ–∑–∏—Ç–∏–≤": 0, "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ": 0, "–Ω–µ–≥–∞—Ç–∏–≤": 0}
        for entry in data:
            mood_count[entry["mood"]] += 1
        
        total = len(data)
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –î–ù–ï–í–ù–ò–ö–ê:")
        print(f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {total}")
        print(f"‚Ä¢ –ü–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö: {mood_count['–ø–æ–∑–∏—Ç–∏–≤']} ({mood_count['–ø–æ–∑–∏—Ç–∏–≤']/total*100:.1f}%)")
        print(f"‚Ä¢ –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö: {mood_count['–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ']} ({mood_count['–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ']/total*100:.1f}%)")
        print(f"‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö: {mood_count['–Ω–µ–≥–∞—Ç–∏–≤']} ({mood_count['–Ω–µ–≥–∞—Ç–∏–≤']/total*100:.1f}%)")
        
        if mood_count['–Ω–µ–≥–∞—Ç–∏–≤'] > mood_count['–ø–æ–∑–∏—Ç–∏–≤']:
            print("\nüíô –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —É –≤–∞—Å –±—ã–ª–æ –±–æ–ª—å—à–µ —Å–ª–æ–∂–Ω—ã—Ö –º—ã—Å–ª–µ–π.")
            print("–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∑–∞ –ø–æ–º–æ—â—å—é - –ø—Ä–∏–∑–Ω–∞–∫ —Å–∏–ª—ã.")
    
    except:
        print("\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")

def print_welcome():
    """–ü–µ—á–∞—Ç–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print("\n" + "=" * 50)
    print("üåü –î–ù–ï–í–ù–ò–ö –ú–´–°–õ–ï–ô v2.0")
    print("=" * 50)
    print("üìù –ó–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –≥–æ–ª–æ—Å–æ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ")
    print("üîä –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: –£–°–ü–ï–®–ù–û")
    print(f"üíæ –î–Ω–µ–≤–Ω–∏–∫: {LOG_FILE}")
    print("\n‚úèÔ∏è –ì–û–í–û–†–ò–¢–ï –ö–û–ì–î–ê –£–í–ò–î–ò–¢–ï –°–ò–ì–ù–ê–õ '–ì–æ–≤–æ—Ä–∏—Ç–µ –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞...'")
    print("üõë –î–ª—è –≤—ã—Ö–æ–¥–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç")

def main():
    print_welcome()
    
    try:
        while True:
            text = record_and_recognize()
            if not text:
                continue
            
            if moderate_text(text):
                print("\nüö´ –í–ù–ò–ú–ê–ù–ò–ï: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è")
                save_thought(text, "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ")
                print("–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Å –ø–æ–º–µ—Ç–∫–æ–π '–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ'")
            else:
                mood = analyze_sentiment(text)
                quote = random.choice(QUOTES[mood])
                
                print(f"\nüìä –ê–ù–ê–õ–ò–ó –ù–ê–°–¢–†–û–ï–ù–ò–Ø: {mood.upper()}")
                print(f"üí¨ –ú–£–î–†–ê–Ø –ú–´–°–õ–¨: {quote}")
                
                if save_thought(text, mood):
                    print("üíæ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ")
                    
                    if mood == "–Ω–µ–≥–∞—Ç–∏–≤":
                        print("\nüíô –ü–æ–¥–¥–µ—Ä–∂–∫–∞:")
                        print("- –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã")
                        print("- –ü–æ–≥–æ–≤–æ—Ä–∏—Ç–µ —Å –±–ª–∏–∑–∫–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º")
                        print("- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏")
            
            show_stats()
            print("\n" + "=" * 50)
            print("üé§ –ì–û–¢–û–í –ö –ù–û–í–û–ô –ú–´–°–õ–ò...")
    
    except KeyboardInterrupt:
        print("\n\nüõë –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        print("–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á! üëã")

if __name__ == "__main__":
    main()